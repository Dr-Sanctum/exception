import java.util.ArrayList;
import java.util.List;

/*
1)Реализуйте 3 метода, чтобы в каждом из них получить разные исключения
2)Посмотрите на код, и подумайте сколько разных типов исключений вы тут сможете получить?
3)Реализуйте метод, принимающий в качестве аргументов два целочисленных массива, и 
возвращающий новый массив, каждый элемент которого равен разности элементов двух 
входящих массивов в той же ячейке. Если длины массивов не равны, необходимо как-то 
оповестить пользователя.
4)* Реализуйте метод, принимающий в качестве аргументов два целочисленных массива, 
и возвращающий новый массив, каждый элемент которого равен частному элементов двух 
входящих массивов в той же ячейке. Если длины массивов не равны, необходимо как-то оповестить 
пользователя. Важно: При выполнении метода единственное исключение, 
которое пользователь может увидеть - RuntimeException, т.е. ваше. */

/**
 * hw1
 */
public class hw1 {
    public static void main(String[] args) {
        // 1)Реализуйте 3 метода, чтобы в каждом из них получить разные исключения

        // NullPointerException
        List<Integer> test = null;
        // sizeList(test);

        // IndexOutOfBoundsException
        test = new ArrayList<Integer>();
        // indexList(test, 1);

        // ArithmeticException: / by zero
        // calcDivision(1, 0);

        // 2)Посмотрите на код, и подумайте сколько разных типов исключений вы тут
        // сможете получить?
        /*
         * 1. Если на вход придёт null
         * 2. Если длинна строк массива будет меньше 5 то выйдем за пределы массива по
         * индексу
         * 3. Если в массиве содержатся пустые строки или строки не(не только) с цифрами
         * то на этапе преобразования строки в int
         */

        /*
         * 3)Реализуйте метод, принимающий в качестве аргументов два целочисленных
         * массива, и возвращающий новый массив, каждый элемент которого равен
         * разности элементов двух входящих массивов в той же ячейке. Если длины
         * массивов не равны, необходимо как-то оповестить пользователя.
         */
        int[] arr1 = new int[5];
        int[] arr2 = new int[4];
        // sumArr(arr1, arr2);

        /*
         * 4)* Реализуйте метод, принимающий в качестве аргументов два целочисленных
         * массива, и возвращающий новый массив, каждый элемент которого
         * равен частному элементов двух входящих массивов в той же ячейке.
         * Если длины массивов не равны, необходимо как-то оповестить
         * пользователя. Важно: При выполнении метода единственное исключение,
         * которое пользователь может увидеть - RuntimeException, т.е. ваше.
         */
        int[] arr3 = new int[5];
        int[] arr4 = new int[5];
        divArr(arr3, arr4);
    }

    // 1)Реализуйте 3 метода, чтобы в каждом из них получить разные исключения

    public static void sizeList(List list) {
        System.out.println(list.size());
    }

    public static void indexList(List list, int index) {
        System.out.println(list.get(index));
    }

    public static void calcDivision(int a, int b) {
        System.out.println(a / b);
    }

    /*
     * 3)Реализуйте метод, принимающий в качестве аргументов два целочисленных
     * массива, и возвращающий новый массив, каждый элемент которого равен
     * разности элементов двух входящих массивов в той же ячейке. Если длины
     * массивов не равны, необходимо как-то оповестить пользователя.
     */

    public static int[] sumArr(int[] arr1, int[] arr2) {
        if (arr1.length != arr2.length) {
            throw new RuntimeException("Длины массивов не равны");
        }
        int[] result = new int[arr1.length];
        for (int i = 0; i < arr1.length; i++) {
            result[i] = arr1[i] - arr2[i];
        }
        return result;
    }

    /*
     * 4)* Реализуйте метод, принимающий в качестве аргументов два целочисленных
     * массива, и возвращающий новый массив, каждый элемент которого
     * равен частному элементов двух входящих массивов в той же ячейке.
     * Если длины массивов не равны, необходимо как-то оповестить
     * пользователя. Важно: При выполнении метода единственное исключение,
     * которое пользователь может увидеть - RuntimeException, т.е. ваше.
     */

    public static int[] divArr(int[] arr1, int[] arr2) {
        if (arr1.length != arr2.length) {
            throw new RuntimeException("Длины массивов не равны");
        }
        int[] result = new int[arr1.length];
        try {
            for (int i = 0; i < arr1.length; i++) {
                result[i] = arr1[i] / arr2[i];
            }

        } catch (Exception e) {
            System.out.println("Неизвестная ошибка");
        }
        return result;
    }
}